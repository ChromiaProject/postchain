/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "Messages"
 */
package com.chromaway.postchain.ebft.messages;

import java.io.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.*;

public class Message {

	public static final int getUnfinishedBlockChosen = 0;
	public static final int unfinishedBlockChosen = 1;
	public static final int getBlockAtHeightChosen = 2;
	public static final int completeBlockChosen = 3;
	public static final int statusChosen = 4;
	public static final int identificationChosen = 5;
	public static final int getBlockSignatureChosen = 6;
	public static final int blockSignatureChosen = 7;
	public static final int transactionChosen = 8;

	public final int choiceID;

	@Alternative(0)
	public final GetUnfinishedBlock getUnfinishedBlock;

	@Alternative(1)
	public final UnfinishedBlock unfinishedBlock;

	@Alternative(2)
	public final GetBlockAtHeight getBlockAtHeight;

	@Alternative(3)
	public final CompleteBlock completeBlock;

	@Alternative(4)
	public final Status status;

	@Alternative(5)
	public final Identification identification;

	@Alternative(6)
	public final GetBlockSignature getBlockSignature;

	@Alternative(7)
	public final BlockSignature blockSignature;

	@Alternative(8)
	public final Transaction transaction;


	private Message(int choiceID, GetUnfinishedBlock getUnfinishedBlock, UnfinishedBlock unfinishedBlock, GetBlockAtHeight getBlockAtHeight, CompleteBlock completeBlock, Status status, Identification identification, GetBlockSignature getBlockSignature, BlockSignature blockSignature, Transaction transaction) {
		this.choiceID = choiceID;
		this.getUnfinishedBlock = getUnfinishedBlock;
		this.unfinishedBlock = unfinishedBlock;
		this.getBlockAtHeight = getBlockAtHeight;
		this.completeBlock = completeBlock;
		this.status = status;
		this.identification = identification;
		this.getBlockSignature = getBlockSignature;
		this.blockSignature = blockSignature;
		this.transaction = transaction;
	}

	public static Message getUnfinishedBlock(GetUnfinishedBlock getUnfinishedBlock) {
		return new Message(getUnfinishedBlockChosen, getUnfinishedBlock, null, null, null, null, null, null, null, null);
	}

	public static Message unfinishedBlock(UnfinishedBlock unfinishedBlock) {
		return new Message(unfinishedBlockChosen, null, unfinishedBlock, null, null, null, null, null, null, null);
	}

	public static Message getBlockAtHeight(GetBlockAtHeight getBlockAtHeight) {
		return new Message(getBlockAtHeightChosen, null, null, getBlockAtHeight, null, null, null, null, null, null);
	}

	public static Message completeBlock(CompleteBlock completeBlock) {
		return new Message(completeBlockChosen, null, null, null, completeBlock, null, null, null, null, null);
	}

	public static Message status(Status status) {
		return new Message(statusChosen, null, null, null, null, status, null, null, null, null);
	}

	public static Message identification(Identification identification) {
		return new Message(identificationChosen, null, null, null, null, null, identification, null, null, null);
	}

	public static Message getBlockSignature(GetBlockSignature getBlockSignature) {
		return new Message(getBlockSignatureChosen, null, null, null, null, null, null, getBlockSignature, null, null);
	}

	public static Message blockSignature(BlockSignature blockSignature) {
		return new Message(blockSignatureChosen, null, null, null, null, null, null, null, blockSignature, null);
	}

	public static Message transaction(Transaction transaction) {
		return new Message(transactionChosen, null, null, null, null, null, null, null, null, transaction);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof Message)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static Message der_decode(InputStream in) throws IOException {
		return (Message)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = Messages.type(65549);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(Message.class);
		AsnConverter getUnfinishedBlockConverter = GetUnfinishedBlock.CONV;
		AsnConverter unfinishedBlockConverter = UnfinishedBlock.CONV;
		AsnConverter getBlockAtHeightConverter = GetBlockAtHeight.CONV;
		AsnConverter completeBlockConverter = CompleteBlock.CONV;
		AsnConverter statusConverter = Status.CONV;
		AsnConverter identificationConverter = Identification.CONV;
		AsnConverter getBlockSignatureConverter = GetBlockSignature.CONV;
		AsnConverter blockSignatureConverter = BlockSignature.CONV;
		AsnConverter transactionConverter = Transaction.CONV;
		CONV.setAlternativeConverters(new AsnConverter[] { getUnfinishedBlockConverter, unfinishedBlockConverter, getBlockAtHeightConverter, completeBlockConverter, statusConverter, identificationConverter, getBlockSignatureConverter, blockSignatureConverter, transactionConverter });
	}


}
