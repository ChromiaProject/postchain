/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PostchainInterface extends ethers.utils.Interface {
  functions: {
    "isValidNodes(bytes32,address[])": FunctionFragment;
    "isValidSignatures(bytes32,bytes[],address[])": FunctionFragment;
    "verifyBlockHeader(bytes,bytes,tuple)": FunctionFragment;
    "verifyEvent(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isValidNodes",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignatures",
    values: [BytesLike, BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBlockHeader",
    values: [
      BytesLike,
      BytesLike,
      {
        leaf: BytesLike;
        el2Position: BigNumberish;
        extraRoot: BytesLike;
        extraMerkleProofs: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyEvent",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isValidNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyEvent",
    data: BytesLike
  ): Result;

  events: {};
}

export class Postchain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PostchainInterface;

  functions: {
    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSignatures(
      hash: BytesLike,
      signatures: BytesLike[],
      signers: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      el2Leaf: BytesLike,
      proof: {
        leaf: BytesLike;
        el2Position: BigNumberish;
        extraRoot: BytesLike;
        extraMerkleProofs: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    verifyEvent(
      _hash: BytesLike,
      _event: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;
  };

  isValidNodes(
    hash: BytesLike,
    nodes: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignatures(
    hash: BytesLike,
    signatures: BytesLike[],
    signers: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyBlockHeader(
    blockHeader: BytesLike,
    el2Leaf: BytesLike,
    proof: {
      leaf: BytesLike;
      el2Position: BigNumberish;
      extraRoot: BytesLike;
      extraMerkleProofs: BytesLike[];
    },
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  verifyEvent(
    _hash: BytesLike,
    _event: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  callStatic: {
    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignatures(
      hash: BytesLike,
      signatures: BytesLike[],
      signers: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      el2Leaf: BytesLike,
      proof: {
        leaf: BytesLike;
        el2Position: BigNumberish;
        extraRoot: BytesLike;
        extraMerkleProofs: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    verifyEvent(
      _hash: BytesLike,
      _event: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignatures(
      hash: BytesLike,
      signatures: BytesLike[],
      signers: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      el2Leaf: BytesLike,
      proof: {
        leaf: BytesLike;
        el2Position: BigNumberish;
        extraRoot: BytesLike;
        extraMerkleProofs: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyEvent(
      _hash: BytesLike,
      _event: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignatures(
      hash: BytesLike,
      signatures: BytesLike[],
      signers: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      el2Leaf: BytesLike,
      proof: {
        leaf: BytesLike;
        el2Position: BigNumberish;
        extraRoot: BytesLike;
        extraMerkleProofs: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyEvent(
      _hash: BytesLike,
      _event: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
