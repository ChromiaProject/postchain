/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ChrL2Interface extends ethers.utils.Interface {
  functions: {
    "_balances(address,address)": FunctionFragment;
    "_withdraw(bytes32)": FunctionFragment;
    "appNodes(uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "directoryNodes(uint256)": FunctionFragment;
    "isValidNodes(bytes32,address[])": FunctionFragment;
    "updateAppNodes(bytes32,bytes[],address[])": FunctionFragment;
    "updateDirectoryNodes(bytes32,bytes[],address[])": FunctionFragment;
    "upperPowerOfTwo(uint256)": FunctionFragment;
    "verifyBlockHeader(bytes)": FunctionFragment;
    "verifyEventHash(bytes,bytes32)": FunctionFragment;
    "withdraw(bytes32,address)": FunctionFragment;
    "withdraw_request(bytes,bytes32,bytes,bytes[],bytes32[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_balances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "directoryNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNodes",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAppNodes",
    values: [BytesLike, BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDirectoryNodes",
    values: [BytesLike, BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upperPowerOfTwo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBlockHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyEventHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_request",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[],
      BytesLike[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appNodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directoryNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAppNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDirectoryNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upperPowerOfTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyEventHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_request",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,address,uint256)": EventFragment;
    "WithdrawRequest(address,address,uint256)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class ChrL2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChrL2Interface;

  functions: {
    _balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _withdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        token: string;
        beneficiary: string;
        amount: BigNumber;
        block_number: BigNumber;
        isWithdraw: boolean;
      }
    >;

    appNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    directoryNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAppNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _appNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDirectoryNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _directoryNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upperPowerOfTwo(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    verifyEventHash(
      _event: BytesLike,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    withdraw(
      _hash: BytesLike,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw_request(
      _event: BytesLike,
      _hash: BytesLike,
      blockHeader: BytesLike,
      sigs: BytesLike[],
      merkleProofs: BytesLike[],
      position: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _balances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _withdraw(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean] & {
      token: string;
      beneficiary: string;
      amount: BigNumber;
      block_number: BigNumber;
      isWithdraw: boolean;
    }
  >;

  appNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  directoryNodes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidNodes(
    hash: BytesLike,
    nodes: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAppNodes(
    hash: BytesLike,
    sigs: BytesLike[],
    _appNodes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDirectoryNodes(
    hash: BytesLike,
    sigs: BytesLike[],
    _directoryNodes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upperPowerOfTwo(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyBlockHeader(
    blockHeader: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  verifyEventHash(
    _event: BytesLike,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  withdraw(
    _hash: BytesLike,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw_request(
    _event: BytesLike,
    _hash: BytesLike,
    blockHeader: BytesLike,
    sigs: BytesLike[],
    merkleProofs: BytesLike[],
    position: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        token: string;
        beneficiary: string;
        amount: BigNumber;
        block_number: BigNumber;
        isWithdraw: boolean;
      }
    >;

    appNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    directoryNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAppNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _appNodes: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateDirectoryNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _directoryNodes: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    upperPowerOfTwo(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    verifyEventHash(
      _event: BytesLike,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    withdraw(
      _hash: BytesLike,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw_request(
      _event: BytesLike,
      _hash: BytesLike,
      blockHeader: BytesLike,
      sigs: BytesLike[],
      merkleProofs: BytesLike[],
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(
      owner?: string | null,
      token?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; value: BigNumber }
    >;

    WithdrawRequest(
      beneficiary?: string | null,
      token?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; token: string; value: BigNumber }
    >;

    Withdrawal(
      beneficiary?: string | null,
      token?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; token: string; value: BigNumber }
    >;
  };

  estimateGas: {
    _balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withdraw(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    appNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    directoryNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAppNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _appNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDirectoryNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _directoryNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upperPowerOfTwo(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyEventHash(
      _event: BytesLike,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _hash: BytesLike,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw_request(
      _event: BytesLike,
      _hash: BytesLike,
      blockHeader: BytesLike,
      sigs: BytesLike[],
      merkleProofs: BytesLike[],
      position: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _withdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    directoryNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidNodes(
      hash: BytesLike,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAppNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _appNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDirectoryNodes(
      hash: BytesLike,
      sigs: BytesLike[],
      _directoryNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upperPowerOfTwo(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyBlockHeader(
      blockHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyEventHash(
      _event: BytesLike,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _hash: BytesLike,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_request(
      _event: BytesLike,
      _hash: BytesLike,
      blockHeader: BytesLike,
      sigs: BytesLike[],
      merkleProofs: BytesLike[],
      position: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
