package net.postchain.eif.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.9.
 */
@SuppressWarnings("rawtypes")
public class TokenBridge extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5061405f806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b23e97a21161007c578063b23e97a214610375578063cbda1234146103a9578063d5bdab1a146103bc578063dcf2793a146103cf578063e7547ae2146103e2578063f2fde38b146103f557600080fd5b8063715018a6146102fc57806374efe7f2146103045780638da5cb5b146103175780639b5b9b181461033c578063a224cee71461034f578063a4be7a0d1461036257600080fd5b806347e7ef241161011557806347e7ef24146101ec5780634b561753146101ff5780635cd72a0c1461021257806360657b211461026f5780636a0cd1f5146102bb5780636ebcf607146102ce57600080fd5b8063150b7a02146101525780631b258d501461018e57806323f2a73f146101a35780632e350fa2146101c6578063414d4285146101d9575b600080fd5b6101706101603660046134bd565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101a161019c366004613528565b610408565b005b6101b66101b1366004613528565b610759565b6040519015158152602001610185565b6101a16101d4366004613558565b610786565b6101a16101e73660046137fc565b61085b565b6101b66101fa3660046138f0565b6108c8565b6101a161020d366004613528565b610bdf565b61025e610220366004613558565b609a60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949390921692909160ff1685565b604051610185959493929190613954565b61025e61027d366004613558565b609960205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949390921692909160ff1685565b6101a16102c9366004613528565b610d79565b6102ee6102dc366004613987565b60976020526000908152604090205481565b604051908152602001610185565b6101a1610fb8565b6102ee610312366004613558565b610fee565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610185565b6101b661034a3660046138f0565b61100f565b6101a161035d3660046139ab565b611491565b6101a1610370366004613528565b6116a2565b6103246103833660046138f0565b60986020908152600092835260408084209091529082529020546001600160a01b031681565b6101a16103b7366004613558565b6119c3565b6102ee6103ca366004613558565b611a9f565b6103246103dd3660046139e7565b611aaa565b6101a16103f03660046137fc565b611ae2565b6101a1610403366004613987565b611b23565b600260655414156104345760405162461bcd60e51b815260040161042b90613a09565b60405180910390fd5b6002606555600082815260996020526040902060018101546001600160a01b038381169116146104b75760405162461bcd60e51b815260206004820152602860248201527f546f6b656e4272696467653a206e6f2066756e6420666f72207468652062656e604482015267656669636961727960c01b606482015260840161042b565b43816003015411156105275760405162461bcd60e51b815260206004820152603360248201527f546f6b656e4272696467653a206e6f74206d617475726520656e6f75676820746044820152721bc81dda5d1a191c985dc81d1a1948199d5b99606a1b606482015260840161042b565b6001600482015460ff1660028111156105425761054261391c565b146105ab5760405162461bcd60e51b815260206004820152603360248201527f546f6b656e4272696467653a2066756e642069732070656e64696e67206f72206044820152721dd85cc8185b1c9958591e4818db185a5b5959606a1b606482015260840161042b565b600081600201541180156105dc575080546001600160a01b0316600090815260976020526040902054600282015411155b61063b5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a206e6f7420656e6f75676820616d6f756e7420746044820152696f20776974686472617760b01b606482015260840161042b565b60048101805460ff191660029081179091558101805460009182905582546001600160a01b0316825260976020526040822080549192839261067e908490613a56565b9091555050815460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156106d057600080fd5b505af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190613a6d565b5081546040518281526001600160a01b03918216918516907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398906020015b60405180910390a3505060016065555050565b6000828152609b602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6033546001600160a01b031633146107b05760405162461bcd60e51b815260040161042b90613a8f565b600081815260996020526040812090600482015460ff1660028111156107d8576107d861391c565b146108415760405162461bcd60e51b815260206004820152603360248201527f546f6b656e4272696467653a207769746864726177207265717565737420737460448201527261747573206973206e6f742070656e64696e6760681b606482015260840161042b565b6004810180546001919060ff191682805b02179055505050565b6002606554141561087e5760405162461bcd60e51b815260040161042b90613a09565b60026065556108908585858585611bbe565b845161089c9087611d2e565b94516000908152609e60205260409020805460ff19169515159590951790945550506001606555505050565b604080516020808201835260008083528351808301855281815284516004815260248101865292830180516001600160e01b03166306fdde0360e01b179052935190939184918291606091829182916001600160a01b038c169161092b91613af4565b600060405180830381855afa9150503d8060008114610966576040519150601f19603f3d011682016040523d82523d6000602084013e61096b565b606091505b509094509250831561098e578280602001905181019061098b9190613b10565b96505b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b17905290516001600160a01b038c16916109cc91613af4565b600060405180830381855afa9150503d8060008114610a07576040519150601f19603f3d011682016040523d82523d6000602084013e610a0c565b606091505b5090945091508315610a2f5781806020019051810190610a2c9190613b10565b95505b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516001600160a01b038c1691610a6d91613af4565b600060405180830381855afa9150503d8060008114610aa8576040519150601f19603f3d011682016040523d82523d6000602084013e610aad565b606091505b5090945090508315610ad05780806020019051810190610acd9190613b7d565b94505b6040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038b16906323b872dd90606401602060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190613a6d565b506001600160a01b038a16600090815260976020526040812080548b9290610b7f908490613ba0565b90915550506040516001600160a01b038b169033907f8e2241230bfceb0b88ebd8881da6c8d72e36bb01453cb07aada0ffa357e7ce0690610bc7908d908c908c908c90613be4565b60405180910390a35060019998505050505050505050565b6033546001600160a01b03163314610c095760405162461bcd60e51b815260040161042b90613a8f565b609d8054610c1990600190613a56565b81548110610c2957610c29613c24565b9060005260206000200154821015610c535760405162461bcd60e51b815260040161042b90613c3a565b609d8054610c6390600190613a56565b81548110610c7357610c73613c24565b9060005260206000200154821115610cbb57609d80546001810182556000919091527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b018290555b6000828152609b602090815260408083206001600160a01b038516845290915290205460ff1615610ceb57600080fd5b6000828152609c602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b038716908117909155868552609b8452828520818652845293829020805460ff19169091179055518481527f7429a06e9412e469f0d64f9d222640b0af359f556b709e2913588c227851b88d910160405180910390a25050565b6033546001600160a01b03163314610da35760405162461bcd60e51b815260040161042b90613a8f565b609d8054610db390600190613a56565b81548110610dc357610dc3613c24565b9060005260206000200154821015610ded5760405162461bcd60e51b815260040161042b90613c3a565b610df78282610759565b610e0057600080fd5b6000828152609c6020526040812054815b81811015610e7a576000858152609c6020526040902080546001600160a01b038616919083908110610e4557610e45613c24565b6000918252602090912001546001600160a01b03161415610e6857809250610e7a565b80610e7281613c90565b915050610e11565b506000848152609b602090815260408083206001600160a01b03871684528252808320805460ff19169055868352609c9091529020610eba600183613a56565b81548110610eca57610eca613c24565b6000918252602080832090910154868352609c909152604090912080546001600160a01b039092169184908110610f0357610f03613c24565b600091825260208083209190910180546001600160a01b0319166001600160a01b039490941693909317909255858152609c90915260409020805480610f4b57610f4b613cab565b600082815260209020810160001990810180546001600160a01b03191690550190556040516001600160a01b038416907f7126bef88d1149ccdff9681ed5aecd3ba5ae70c96517551de250af09cebd1a0b90610faa9087815260200190565b60405180910390a250505050565b6033546001600160a01b03163314610fe25760405162461bcd60e51b815260040161042b90613a8f565b610fec6000611f15565b565b609d8181548110610ffe57600080fd5b600091825260209091200154905081565b604051632142170760e11b8152336004820152306024820152604481018290526000906001600160a01b038416906342842e0e90606401600060405180830381600087803b15801561106057600080fd5b505af1158015611074573d6000803e3d6000fd5b505050506001600160a01b0383166000818152609860209081526040808320868452825280832080546001600160a01b0319163317905580518083018252838152815180840183528481528251938401835293835290516301ffc9a760e01b8152635b5e139f60e01b60048201529093906301ffc9a79060240160206040518083038186803b15801561110657600080fd5b505afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190613a6d565b156114345760408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b1790529051600091606091829182916001600160a01b038c169161118b91613af4565b600060405180830381855afa9150503d80600081146111c6576040519150601f19603f3d011682016040523d82523d6000602084013e6111cb565b606091505b5090945092508361121e5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4272696467653a2063616e6e6f7420676574206e6674206e616d65604482015260640161042b565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b17905290516001600160a01b038c169161125c91613af4565b600060405180830381855afa9150503d8060008114611297576040519150601f19603f3d011682016040523d82523d6000602084013e61129c565b606091505b509094509150836112fa5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4272696467653a2063616e6e6f7420676574206e66742073796d626044820152611bdb60f21b606482015260840161042b565b896001600160a01b03168960405160240161131791815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663c87b56dd60e01b1790525161134c9190613af4565b600060405180830381855afa9150503d8060008114611387576040519150601f19603f3d011682016040523d82523d6000602084013e61138c565b606091505b509094509050836113ed5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4272696467653a2063616e6e6f7420676574206e667420746f6b656044820152646e2055524960d81b606482015260840161042b565b828060200190518101906114019190613b10565b9650818060200190518101906114179190613b10565b95508080602001905181019061142d9190613b10565b9450505050505b856001600160a01b0316336001600160a01b03167fe07a2773ffec3af35c5bfeeace9fef1a929db117a1d1d2e8a8528b84de16d2e18786868660405161147d9493929190613cc1565b60405180910390a350600195945050505050565b600054610100900460ff166114ac5760005460ff16156114b0565b303b155b6115135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161042b565b600054610100900460ff16158015611535576000805461ffff19166101011790555b61153d611f67565b60008052609c60209081528251611579917f21d5695aeb71770b4b420e85352fe1a012fa06ae92de02f7ee513765e0afa0239190850190613343565b5060005b60008052609c6020527f21d5695aeb71770b4b420e85352fe1a012fa06ae92de02f7ee513765e0afa02354811015611659576000808052609c6020527f21d5695aeb71770b4b420e85352fe1a012fa06ae92de02f7ee513765e0afa02380546001927f10afac9233b4ccc54d6404ffc1cf3b47515a2b8edbf675d15eddce05a027dcbd9290918590811061161357611613613c24565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790558061165181613c90565b91505061157d565b50609d805460018101825560009182527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0155801561169e576000805461ff00191690555b5050565b600260655414156116c55760405162461bcd60e51b815260040161042b90613a09565b600260658190556000838152609a602052604090209081015460018201546001600160a01b0384811691161461174d5760405162461bcd60e51b815260206004820152602760248201527f546f6b656e4272696467653a206e6f206e667420666f72207468652062656e656044820152666669636961727960c81b606482015260840161042b565b43826003015411156117bc5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e4272696467653a206e6f74206d617475726520656e6f75676820746044820152711bc81dda5d1a191c985dc81d1a19481b999d60721b606482015260840161042b565b6001600483015460ff1660028111156117d7576117d761391c565b1461183f5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e4272696467653a206e66742069732070656e64696e67206f722077604482015271185cc8185b1c9958591e4818db185a5b595960721b606482015260840161042b565b81546001600160a01b039081166000908152609860209081526040808320858452909152902054166118d95760405162461bcd60e51b815260206004820152603f60248201527f546f6b656e4272696467653a206e667420746f6b656e20696420646f6573206e60448201527f6f74206578697374206f722077617320616c726561647920636c61696d656400606482015260840161042b565b6004828101805460ff1916600217905582546001600160a01b0390811660009081526098602090815260408083208684529091529081902080546001600160a01b031916905584549051632142170760e11b8152309381019390935285821660248401526044830184905216906342842e0e90606401600060405180830381600087803b15801561196957600080fd5b505af115801561197d573d6000803e3d6000fd5b505083546040518481526001600160a01b03918216935090861691507f705b466d82a54e5c3e4fa79d2de02dff364a2c0513cf6b9c9fa7688bba859ce690602001610746565b6033546001600160a01b031633146119ed5760405162461bcd60e51b815260040161042b90613a8f565b60008181526099602052604090206001600482015460ff166002811115611a1657611a1661391c565b14611a895760405162461bcd60e51b815260206004820152603860248201527f546f6b656e4272696467653a207769746864726177207265717565737420737460448201527f61747573206973206e6f7420776974686472617761626c650000000000000000606482015260840161042b565b6004810180546000919060ff1916600183610852565b600061078082611f96565b609c6020528160005260406000208181548110611ac657600080fd5b6000918252602090912001546001600160a01b03169150829050565b60026065541415611b055760405162461bcd60e51b815260040161042b90613a09565b6002606555611b178585858585611bbe565b845161089c908761208b565b6033546001600160a01b03163314611b4d5760405162461bcd60e51b815260040161042b90613a8f565b6001600160a01b038116611bb25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161042b565b611bbb81611f15565b50565b84516000908152609e602052604090205460ff1615611c305760405162461bcd60e51b815260206004820152602860248201527f546f6b656e4272696467653a206576656e7420686173682077617320616c726560448201526718591e481d5cd95960c21b606482015260840161042b565b6000806000611c3f878561225b565b50925092509250611c5a611c5284611f96565b8388886123f2565b611cb65760405162461bcd60e51b815260206004820152602760248201527f546f6b656e4272696467653a20626c6f636b207369676e6174757265206973206044820152661a5b9d985b1a5960ca1b606482015260840161042b565b611cce886040015189600001518a60200151846125e6565b611d245760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4272696467653a20696e76616c6964206d65726b6c652070726f6f6044820152603360f91b606482015260840161042b565b5050505050505050565b6000828152609a60205260408120818080611d49878761266e565b6001600160a01b038084166000908152609860209081526040808320858452909152902054939650919450925016611de25760405162461bcd60e51b815260206004820152603660248201527f546f6b656e4272696467653a20696e76616c696420746f6b656e20696420746f604482015275206d616b65207265717565737420776974686472617760501b606482015260840161042b565b83546001600160a01b038085166001600160a01b03199283161786556001860180549185169190921617905560028401819055611e20436032613ba0565b60038581019182556004808701805460ff199081166001908117835560008d8152609a602052604090208a5481546001600160a01b039182166001600160a01b0319918216178355838d015483850180549190931691161790556002808c015481830155965495810195909555915492840180548a9660ff909516949193921691908490811115611eb357611eb361391c565b0217905550905050826001600160a01b0316826001600160a01b03167f84149ec166f44250e1dc5ddb73714622cfe405a19f03a91b60682bc23878c64683604051611f0091815260200190565b60405180910390a35060019695505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611f8e5760405162461bcd60e51b815260040161042b90613d0b565b610fec6126ff565b609d546000908190611faa90600190613a56565b90506000609d8281548110611fc157611fc1613c24565b90600052602060002001549050808410611fdc579392505050565b815b801561208057609d8181548110611ff757611ff7613c24565b9060005260206000200154851080156120375750609d612018600183613a56565b8154811061202857612028613c24565b90600052602060002001548510155b1561206e57609d612049600183613a56565b8154811061205957612059613c24565b90600052602060002001549350505050919050565b8061207881613d56565b915050611fde565b506000949350505050565b60008281526099602052604081208180806120a6878761266e565b9250925092506000811180156120d457506001600160a01b0383166000908152609760205260409020548111155b61213d5760405162461bcd60e51b815260206004820152603460248201527f546f6b656e4272696467653a20696e76616c696420616d6f756e7420746f206d604482015273616b65207265717565737420776974686472617760601b606482015260840161042b565b83546001600160a01b038085166001600160a01b0319928316178655600186018054918516919092161790556002840181905561217b436032613ba0565b60038581019182556004808701805460ff199081166001908117835560008d81526099602052604090208a5481546001600160a01b039182166001600160a01b0319918216178355838d015483850180549190931691161790556002808c015481830155965495810195909555915492840180548a9660ff90951694919392169190849081111561220e5761220e61391c565b0217905550905050826001600160a01b0316826001600160a01b03167fcdb62e3f244f9959bd661d145243fc71558361230885919e11fcc84312d44c7d83604051611f0091815260200190565b6000806000808460200151612273866000015161272f565b146122ca5760405162461bcd60e51b815260206004820152602160248201527f506f7374636861696e3a20696e76616c696420454946206578747261206461746044820152606160f81b606482015260840161042b565b60008060006122d8896127ad565b9250925092508088606001511461233c5760405162461bcd60e51b815260206004820152602260248201527f506f7374636861696e3a20696e76616c6964206578747261206461746120726f6044820152611bdd60f21b606482015260840161042b565b612363886020015189604001518a606001518b60800151612b3a909392919063ffffffff16565b6123c15760405162461bcd60e51b815260206004820152602960248201527f506f7374636861696e3a20696e76616c696420454946206578747261206d657260448201526835b63290383937b7b360b91b606482015260840161042b565b82826123d28a600001516000612dd4565b8a516123df906020612dd4565b929c919b50995090975095505050505050565b6000848152609c60205260408120548190819061240e90612e39565b90506000805b86518110156125d95760005b86518110156125c65761244c8a88838151811061243f5761243f613c24565b6020026020010151610759565b6124a45760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4272696467653a207369676e6572206973206e6f742076616c696460448201526330ba37b960e11b606482015260840161042b565b6124e1898984815181106124ba576124ba613c24565b60200260200101518984815181106124d4576124d4613c24565b6020026020010151612e69565b156125b457846124f081613c90565b955050826001600160a01b031687828151811061250f5761250f613c24565b60200260200101516001600160a01b0316116125935760405162461bcd60e51b815260206004820152603b60248201527f546f6b656e4272696467653a206475706c6963617465207369676e617475726560448201527f206f72207369676e657273206973206f7574206f66206f726465720000000000606482015260840161042b565b8681815181106125a5576125a5613c24565b602002602001015192506125c6565b806125be81613c90565b915050612420565b50806125d181613c90565b915050612414565b5050111595945050505050565b600083815b8651811015612662576001811b851680612629576126228389848151811061261557612615613c24565b6020026020010151612f20565b925061264f565b61264c88838151811061263e5761263e613c24565b602002602001015184612f20565b92505b508061265a81613c90565b9150506125eb565b50909114949350505050565b600080600080848060200190518101906126889190613d6d565b855160208701209091508681146126e15760405162461bcd60e51b815260206004820152601860248201527f506f7374636861696e3a20696e76616c6964206576656e740000000000000000604482015260640161042b565b81602001518260400151836060015194509450945050509250925092565b600054610100900460ff166127265760405162461bcd60e51b815260040161042b90613d0b565b610fec33611f15565b60006002600160a16042600460408760405160200161275396959493929190613dc4565b60408051601f198184030181529082905261276d91613af4565b602060405180830381855afa15801561278a573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107809190613e25565b600080600080848060200190518101906127c79190613e3e565b90506000600260006127dc8460000151612f99565b6127e98560400151612f99565b6040516020016127fb93929190613ecd565b60408051601f198184030181529082905261281591613af4565b602060405180830381855afa158015612832573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128559190613e25565b9050600060026000846060015161286f8660800151612fe3565b60405160200161288193929190613ecd565b60408051601f198184030181529082905261289b91613af4565b602060405180830381855afa1580156128b8573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128db9190613e25565b90506000600260006128f08660a00151612fe3565b8660c0015160405160200161290793929190613ecd565b60408051601f198184030181529082905261292191613af4565b602060405180830381855afa15801561293e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129619190613e25565b9050600060026000858560405160200161297d93929190613ecd565b60408051601f198184030181529082905261299791613af4565b602060405180830381855afa1580156129b4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129d79190613e25565b9050600060026000848860e001516040516020016129f793929190613ecd565b60408051601f1981840301815290829052612a1191613af4565b602060405180830381855afa158015612a2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a519190613e25565b90506000600260078484604051602001612a6d93929190613ecd565b60408051601f1981840301815290829052612a8791613af4565b602060405180830381855afa158015612aa4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612ac79190613e25565b905086602001518114612b1c5760405162461bcd60e51b815260206004820152601f60248201527f506f7374636861696e3a20696e76616c696420626c6f636b2068656164657200604482015260640161042b565b60a087015160e090970151969b909a50959850949650505050505050565b600080849050600060018751612b509190613a56565b905060005b81811015612c9b576001811b861680612bfa5760026000858b8581518110612b7f57612b7f613c24565b6020026020010151604051602001612b9993929190613ecd565b60408051601f1981840301815290829052612bb391613af4565b602060405180830381855afa158015612bd0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bf39190613e25565b9350612c88565b600260008a8481518110612c1057612c10613c24565b602002602001015186604051602001612c2b93929190613ecd565b60408051601f1981840301815290829052612c4591613af4565b602060405180830381855afa158015612c62573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612c859190613e25565b93505b5080612c9381613c90565b915050612b55565b506001811b851680612d395760026008848a8581518110612cbe57612cbe613c24565b6020026020010151604051602001612cd893929190613ecd565b60408051601f1981840301815290829052612cf291613af4565b602060405180830381855afa158015612d0f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612d329190613e25565b9250612dc7565b60026008898481518110612d4f57612d4f613c24565b602002602001015185604051602001612d6a93929190613ecd565b60408051601f1981840301815290829052612d8491613af4565b602060405180830381855afa158015612da1573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612dc49190613e25565b92505b5050909114949350505050565b60008060005b6020811015612e3157612dee816008613ef2565b85612df98387613ba0565b81518110612e0957612e09613c24565b01602001516001600160f81b031916901c919091179080612e2981613c90565b915050612dda565b509392505050565b600081612e4857506000919050565b6003612e55600184613a56565b612e5f9190613f11565b6107809083613a56565b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008186604051602001612eb9929190613f33565b60408051601f19818403018152919052805160209091012090506001600160a01b038416612ee782876131b2565b6001600160a01b03161480612f1657506001600160a01b038416612f0b87876131b2565b6001600160a01b0316145b9695505050505050565b600082158015612f2e575081155b15612f3b57506000610780565b82612f6a576040805160208101849052015b604051602081830303815290604052805190602001209050610780565b81612f8057604080516020810185905201612f4d565b6040805160208101859052908101839052606001612f4d565b604051600160f81b602082015260a160f81b6021820152601160f91b6022820152600160fa1b6023820152600160fd1b602482015260258101829052600090600290604501612753565b60006001600883901c5b801561300857612ffe600183613f55565b915060081c612fed565b60008260ff166001600160401b03811115613025576130256133d2565b6040519080825280601f01601f19166020018201604052801561304f576020820181803683370190505b50859250905060015b8360ff168160ff16116130c75760ff83166001600160f81b031960f885901b16836130838488613f7a565b60ff168151811061309657613096613c24565b60200101906001600160f81b031916908160001a9053505060089290921c91806130bf81613f9d565b915050613058565b506000816000815181106130dd576130dd613c24565b60209101015160f81c6080161115613189576002600160a3613100866003613f55565b600261310d886001613f55565b6000876040516020016131269796959493929190613fbd565b60408051601f198184030181529082905261314091613af4565b602060405180830381855afa15801561315d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906131809190613e25565b95945050505050565b6002600160a36131998684613f55565b6002878660405160200161312696959493929190613dc4565b600081516041146132055760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161042b565b60208201516040830151606084015160001a612f168682858560008360ff16601b148061323557508360ff16601c145b61328c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161042b565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156132e0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166131805760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161042b565b828054828255906000526020600020908101928215613398579160200282015b8281111561339857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613363565b506133a49291506133a8565b5090565b5b808211156133a457600081556001016133a9565b6001600160a01b0381168114611bbb57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561340a5761340a6133d2565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613438576134386133d2565b604052919050565b60006001600160401b03821115613459576134596133d2565b50601f01601f191660200190565b600082601f83011261347857600080fd5b813561348b61348682613440565b613410565b8181528460208386010111156134a057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156134d357600080fd5b84356134de816133bd565b935060208501356134ee816133bd565b92506040850135915060608501356001600160401b0381111561351057600080fd5b61351c87828801613467565b91505092959194509250565b6000806040838503121561353b57600080fd5b82359150602083013561354d816133bd565b809150509250929050565b60006020828403121561356a57600080fd5b5035919050565b60006001600160401b0382111561358a5761358a6133d2565b5060051b60200190565b600082601f8301126135a557600080fd5b813560206135b561348683613571565b82815260059290921b840181019181810190868411156135d457600080fd5b8286015b848110156135ef57803583529183019183016135d8565b509695505050505050565b60006060828403121561360c57600080fd5b604051606081016001600160401b03828210818311171561362f5761362f6133d2565b816040528293508435835260208501356020840152604085013591508082111561365857600080fd5b5061366585828601613594565b6040830152505092915050565b600082601f83011261368357600080fd5b8135602061369361348683613571565b82815260059290921b840181019181810190868411156136b257600080fd5b8286015b848110156135ef5780356001600160401b038111156136d55760008081fd5b6136e38986838b0101613467565b8452509183019183016136b6565b600082601f83011261370257600080fd5b8135602061371261348683613571565b82815260059290921b8401810191818101908684111561373157600080fd5b8286015b848110156135ef578035613748816133bd565b8352918301918301613735565b600060a0828403121561376757600080fd5b60405160a081016001600160401b03828210818311171561378a5761378a6133d2565b8160405282935084359150808211156137a257600080fd5b6137ae86838701613467565b835260208501356020840152604085013560408401526060850135606084015260808501359150808211156137e257600080fd5b506137ef85828601613594565b6080830152505092915050565b60008060008060008060c0878903121561381557600080fd5b86356001600160401b038082111561382c57600080fd5b6138388a838b01613467565b9750602089013591508082111561384e57600080fd5b61385a8a838b016135fa565b9650604089013591508082111561387057600080fd5b61387c8a838b01613467565b9550606089013591508082111561389257600080fd5b61389e8a838b01613672565b945060808901359150808211156138b457600080fd5b6138c08a838b016136f1565b935060a08901359150808211156138d657600080fd5b506138e389828a01613755565b9150509295509295509295565b6000806040838503121561390357600080fd5b823561390e816133bd565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6003811061395057634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03868116825285166020820152604081018490526060810183905260a08101612f166080830184613932565b60006020828403121561399957600080fd5b81356139a4816133bd565b9392505050565b6000602082840312156139bd57600080fd5b81356001600160401b038111156139d357600080fd5b6139df848285016136f1565b949350505050565b600080604083850312156139fa57600080fd5b50508035926020909101359150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015613a6857613a68613a40565b500390565b600060208284031215613a7f57600080fd5b815180151581146139a457600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60005b83811015613adf578181015183820152602001613ac7565b83811115613aee576000848401525b50505050565b60008251613b06818460208701613ac4565b9190910192915050565b600060208284031215613b2257600080fd5b81516001600160401b03811115613b3857600080fd5b8201601f81018413613b4957600080fd5b8051613b5761348682613440565b818152856020838501011115613b6c57600080fd5b613180826020830160208601613ac4565b600060208284031215613b8f57600080fd5b815160ff811681146139a457600080fd5b60008219821115613bb357613bb3613a40565b500190565b60008151808452613bd0816020860160208601613ac4565b601f01601f19169290920160200192915050565b848152608060208201526000613bfd6080830186613bb8565b8281036040840152613c0f8186613bb8565b91505060ff8316606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b60208082526036908201527f546f6b656e4272696467653a2063616e6e6f742075706461746520707265766960408201527537bab9903432b4b3b43a3993903b30b634b230ba37b960511b606082015260800190565b6000600019821415613ca457613ca4613a40565b5060010190565b634e487b7160e01b600052603160045260246000fd5b848152608060208201526000613cda6080830186613bb8565b8281036040840152613cec8186613bb8565b90508281036060840152613d008185613bb8565b979650505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081613d6557613d65613a40565b506000190190565b600060808284031215613d7f57600080fd5b613d876133e8565b825181526020830151613d99816133bd565b60208201526040830151613dac816133bd565b60408201526060928301519281019290925250919050565b600060ff60f81b808960f81b168352808860f81b166001840152808760f81b166002840152808660f81b166003840152808560f81b166004840152508251613e13816005850160208701613ac4565b91909101600501979650505050505050565b600060208284031215613e3757600080fd5b5051919050565b6000610100808385031215613e5257600080fd5b604051908101906001600160401b0382118183101715613e7457613e746133d2565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b60f89390931b6001600160f81b03191683526001830191909152602182015260410190565b6000816000190483118215151615613f0c57613f0c613a40565b500290565b600082613f2e57634e487b7160e01b600052601260045260246000fd5b500490565b60008351613f45818460208801613ac4565b9190910191825250602001919050565b600060ff821660ff84168060ff03821115613f7257613f72613a40565b019392505050565b600060ff821660ff841680821015613f9457613f94613a40565b90039392505050565b600060ff821660ff811415613fb457613fb4613a40565b60010192915050565b6001600160f81b031960f889811b8216835288811b8216600184015287811b8216600284015286811b8216600384015285811b8216600484015284901b1660058201528151600090614016816006850160208701613ac4565b919091016006019897505050505050505056fea2646970667358221220b473280ae2845a64467b8a0363bc717999ddf62072bf310ed729fc7f776bb20564736f6c63430008090033";

    public static final String FUNC__BALANCES = "_balances";

    public static final String FUNC__OWNERS = "_owners";

    public static final String FUNC__WITHDRAW = "_withdraw";

    public static final String FUNC__WITHDRAWNFT = "_withdrawNFT";

    public static final String FUNC_ADDVALIDATOR = "addValidator";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DEPOSITNFT = "depositNFT";

    public static final String FUNC_GETVALIDATORHEIGHT = "getValidatorHeight";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISVALIDATOR = "isValidator";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PENDINGWITHDRAW = "pendingWithdraw";

    public static final String FUNC_REMOVEVALIDATOR = "removeValidator";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPENDINGWITHDRAW = "unpendingWithdraw";

    public static final String FUNC_VALIDATORHEIGHTS = "validatorHeights";

    public static final String FUNC_VALIDATORS = "validators";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWNFT = "withdrawNFT";

    public static final String FUNC_WITHDRAWREQUEST = "withdrawRequest";

    public static final String FUNC_WITHDRAWREQUESTNFT = "withdrawRequestNFT";

    public static final Event DEPOSITEDERC20_EVENT = new Event("DepositedERC20",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event DEPOSITEDERC721_EVENT = new Event("DepositedERC721",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VALIDATORADDED_EVENT = new Event("ValidatorAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VALIDATORREMOVED_EVENT = new Event("ValidatorRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWREQUEST_EVENT = new Event("WithdrawRequest",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWREQUESTNFT_EVENT = new Event("WithdrawRequestNFT",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALNFT_EVENT = new Event("WithdrawalNFT",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected TokenBridge(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TokenBridge(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TokenBridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TokenBridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DepositedERC20EventResponse> getDepositedERC20Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITEDERC20_EVENT, transactionReceipt);
        ArrayList<DepositedERC20EventResponse> responses = new ArrayList<DepositedERC20EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositedERC20EventResponse typedResponse = new DepositedERC20EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.symbol = (Utf8String) eventValues.getNonIndexedValues().get(2);
            typedResponse.decimals = (Uint8) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositedERC20EventResponse> depositedERC20EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositedERC20EventResponse>() {
            @Override
            public DepositedERC20EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITEDERC20_EVENT, log);
                DepositedERC20EventResponse typedResponse = new DepositedERC20EventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.symbol = (Utf8String) eventValues.getNonIndexedValues().get(2);
                typedResponse.decimals = (Uint8) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositedERC20EventResponse> depositedERC20EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITEDERC20_EVENT));
        return depositedERC20EventFlowable(filter);
    }

    public List<DepositedERC721EventResponse> getDepositedERC721Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITEDERC721_EVENT, transactionReceipt);
        ArrayList<DepositedERC721EventResponse> responses = new ArrayList<DepositedERC721EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositedERC721EventResponse typedResponse = new DepositedERC721EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.nft = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.symbol = (Utf8String) eventValues.getNonIndexedValues().get(2);
            typedResponse.tokenURI = (Utf8String) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositedERC721EventResponse> depositedERC721EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositedERC721EventResponse>() {
            @Override
            public DepositedERC721EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITEDERC721_EVENT, log);
                DepositedERC721EventResponse typedResponse = new DepositedERC721EventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.nft = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.symbol = (Utf8String) eventValues.getNonIndexedValues().get(2);
                typedResponse.tokenURI = (Utf8String) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositedERC721EventResponse> depositedERC721EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITEDERC721_EVENT));
        return depositedERC721EventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<ValidatorAddedEventResponse> getValidatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VALIDATORADDED_EVENT, transactionReceipt);
        ArrayList<ValidatorAddedEventResponse> responses = new ArrayList<ValidatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ValidatorAddedEventResponse typedResponse = new ValidatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ValidatorAddedEventResponse> validatorAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ValidatorAddedEventResponse>() {
            @Override
            public ValidatorAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VALIDATORADDED_EVENT, log);
                ValidatorAddedEventResponse typedResponse = new ValidatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ValidatorAddedEventResponse> validatorAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALIDATORADDED_EVENT));
        return validatorAddedEventFlowable(filter);
    }

    public List<ValidatorRemovedEventResponse> getValidatorRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VALIDATORREMOVED_EVENT, transactionReceipt);
        ArrayList<ValidatorRemovedEventResponse> responses = new ArrayList<ValidatorRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ValidatorRemovedEventResponse typedResponse = new ValidatorRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ValidatorRemovedEventResponse> validatorRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ValidatorRemovedEventResponse>() {
            @Override
            public ValidatorRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VALIDATORREMOVED_EVENT, log);
                ValidatorRemovedEventResponse typedResponse = new ValidatorRemovedEventResponse();
                typedResponse.log = log;
                typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ValidatorRemovedEventResponse> validatorRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALIDATORREMOVED_EVENT));
        return validatorRemovedEventFlowable(filter);
    }

    public List<WithdrawRequestEventResponse> getWithdrawRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWREQUEST_EVENT, transactionReceipt);
        ArrayList<WithdrawRequestEventResponse> responses = new ArrayList<WithdrawRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawRequestEventResponse typedResponse = new WithdrawRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawRequestEventResponse> withdrawRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawRequestEventResponse>() {
            @Override
            public WithdrawRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWREQUEST_EVENT, log);
                WithdrawRequestEventResponse typedResponse = new WithdrawRequestEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawRequestEventResponse> withdrawRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWREQUEST_EVENT));
        return withdrawRequestEventFlowable(filter);
    }

    public List<WithdrawRequestNFTEventResponse> getWithdrawRequestNFTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWREQUESTNFT_EVENT, transactionReceipt);
        ArrayList<WithdrawRequestNFTEventResponse> responses = new ArrayList<WithdrawRequestNFTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawRequestNFTEventResponse typedResponse = new WithdrawRequestNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawRequestNFTEventResponse> withdrawRequestNFTEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawRequestNFTEventResponse>() {
            @Override
            public WithdrawRequestNFTEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWREQUESTNFT_EVENT, log);
                WithdrawRequestNFTEventResponse typedResponse = new WithdrawRequestNFTEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawRequestNFTEventResponse> withdrawRequestNFTEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWREQUESTNFT_EVENT));
        return withdrawRequestNFTEventFlowable(filter);
    }

    public List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalEventResponse>() {
            @Override
            public WithdrawalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWAL_EVENT, log);
                WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public List<WithdrawalNFTEventResponse> getWithdrawalNFTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWALNFT_EVENT, transactionReceipt);
        ArrayList<WithdrawalNFTEventResponse> responses = new ArrayList<WithdrawalNFTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalNFTEventResponse typedResponse = new WithdrawalNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.nft = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalNFTEventResponse> withdrawalNFTEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalNFTEventResponse>() {
            @Override
            public WithdrawalNFTEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWALNFT_EVENT, log);
                WithdrawalNFTEventResponse typedResponse = new WithdrawalNFTEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.nft = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalNFTEventResponse> withdrawalNFTEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALNFT_EVENT));
        return withdrawalNFTEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> _balances(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__BALANCES,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> _owners(Address param0, Uint256 param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__OWNERS,
                Arrays.<Type>asList(param0, param1),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>> _withdraw(Bytes32 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WITHDRAW,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>>(function,
                new Callable<Tuple5<Address, Address, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple5<Address, Address, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Address, Address, Uint256, Uint256, Uint8>(
                                (Address) results.get(0),
                                (Address) results.get(1),
                                (Uint256) results.get(2),
                                (Uint256) results.get(3),
                                (Uint8) results.get(4));
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>> _withdrawNFT(Bytes32 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WITHDRAWNFT,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>>(function,
                new Callable<Tuple5<Address, Address, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple5<Address, Address, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Address, Address, Uint256, Uint256, Uint8>(
                                (Address) results.get(0),
                                (Address) results.get(1),
                                (Uint256) results.get(2),
                                (Uint256) results.get(3),
                                (Uint8) results.get(4));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> addValidator(Uint256 _height, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDVALIDATOR,
                Arrays.<Type>asList(_height, _validator),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(Address token, Uint256 amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT,
                Arrays.<Type>asList(token, amount),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> depositNFT(Address nft, Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSITNFT,
                Arrays.<Type>asList(nft, tokenId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getValidatorHeight(Uint256 _height) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVALIDATORHEIGHT,
                Arrays.<Type>asList(_height),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(DynamicArray<Address> _validators) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(_validators),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isValidator(Uint256 _height, Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISVALIDATOR,
                Arrays.<Type>asList(_height, _addr),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(Address param0, Address param1, Uint256 param2, DynamicBytes param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED,
                Arrays.<Type>asList(param0, param1, param2, param3),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pendingWithdraw(Bytes32 _hash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PENDINGWITHDRAW,
                Arrays.<Type>asList(_hash),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeValidator(Uint256 _height, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEVALIDATOR,
                Arrays.<Type>asList(_height, _validator),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(newOwner),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpendingWithdraw(Bytes32 _hash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPENDINGWITHDRAW,
                Arrays.<Type>asList(_hash),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> validatorHeights(Uint256 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATORHEIGHTS,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> validators(Uint256 param0, Uint256 param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATORS,
                Arrays.<Type>asList(param0, param1),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(Bytes32 _hash, Address beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(_hash, beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawNFT(Bytes32 _hash, Address beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWNFT,
                Arrays.<Type>asList(_hash, beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRequest(DynamicBytes _event, EventProof eventProof, DynamicBytes blockHeader, DynamicArray<DynamicBytes> sigs, DynamicArray<Address> signers, ExtraProofData extraProof) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWREQUEST,
                Arrays.<Type>asList(_event, eventProof, blockHeader, sigs, signers, extraProof),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRequestNFT(DynamicBytes _event, EventProof eventProof, DynamicBytes blockHeader, DynamicArray<DynamicBytes> sigs, DynamicArray<Address> signers, ExtraProofData extraProof) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWREQUESTNFT,
                Arrays.<Type>asList(_event, eventProof, blockHeader, sigs, signers, extraProof),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TokenBridge load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TokenBridge(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TokenBridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TokenBridge(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TokenBridge load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TokenBridge(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TokenBridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TokenBridge(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TokenBridge> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TokenBridge.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TokenBridge> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TokenBridge.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TokenBridge> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TokenBridge.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TokenBridge> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TokenBridge.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EventProof extends DynamicStruct {
        public Bytes32 leaf;

        public Uint256 position;

        public DynamicArray<Bytes32> merkleProofs;

        public EventProof(Bytes32 leaf, Uint256 position, DynamicArray<Bytes32> merkleProofs) {
            super(leaf,position,merkleProofs);
            this.leaf = leaf;
            this.position = position;
            this.merkleProofs = merkleProofs;
        }
    }

    public static class ExtraProofData extends DynamicStruct {
        public DynamicBytes leaf;

        public Bytes32 hashedLeaf;

        public Uint256 position;

        public Bytes32 extraRoot;

        public DynamicArray<Bytes32> extraMerkleProofs;

        public ExtraProofData(DynamicBytes leaf, Bytes32 hashedLeaf, Uint256 position, Bytes32 extraRoot, DynamicArray<Bytes32> extraMerkleProofs) {
            super(leaf,hashedLeaf,position,extraRoot,extraMerkleProofs);
            this.leaf = leaf;
            this.hashedLeaf = hashedLeaf;
            this.position = position;
            this.extraRoot = extraRoot;
            this.extraMerkleProofs = extraMerkleProofs;
        }
    }

    public static class DepositedERC20EventResponse extends BaseEventResponse {
        public Address sender;

        public Address token;

        public Uint256 amount;

        public Utf8String name;

        public Utf8String symbol;

        public Uint8 decimals;
    }

    public static class DepositedERC721EventResponse extends BaseEventResponse {
        public Address sender;

        public Address nft;

        public Uint256 tokenId;

        public Utf8String name;

        public Utf8String symbol;

        public Utf8String tokenURI;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class ValidatorAddedEventResponse extends BaseEventResponse {
        public Address _validator;

        public Uint256 height;
    }

    public static class ValidatorRemovedEventResponse extends BaseEventResponse {
        public Address _validator;

        public Uint256 height;
    }

    public static class WithdrawRequestEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address token;

        public Uint256 value;
    }

    public static class WithdrawRequestNFTEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address token;

        public Uint256 tokenId;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address token;

        public Uint256 value;
    }

    public static class WithdrawalNFTEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address nft;

        public Uint256 tokenId;
    }
}
