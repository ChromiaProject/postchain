package net.postchain.ethereum;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.9.
 */
@SuppressWarnings("rawtypes")
public class TokenBridge extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50614294806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b23e97a21161007c578063b23e97a214610375578063cbda1234146103a9578063d5bdab1a146103bc578063dcf2793a146103cf578063e7547ae2146103e2578063f2fde38b146103f557600080fd5b8063715018a6146102fc57806374efe7f2146103045780638da5cb5b146103175780639b5b9b181461033c578063a224cee71461034f578063a4be7a0d1461036257600080fd5b806347e7ef241161011557806347e7ef24146101ec5780634b561753146101ff5780635cd72a0c1461021257806360657b211461026f5780636a0cd1f5146102bb5780636ebcf607146102ce57600080fd5b8063150b7a02146101525780631b258d501461018e57806323f2a73f146101a35780632e350fa2146101c6578063414d4285146101d9575b600080fd5b6101706101603660046136a3565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101a161019c36600461370e565b610408565b005b6101b66101b136600461370e565b610759565b6040519015158152602001610185565b6101a16101d436600461373e565b610786565b6101a16101e73660046139e2565b61085b565b6101b66101fa366004613ad6565b6108c8565b6101a161020d36600461370e565b610c3f565b61025e61022036600461373e565b609a60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949390921692909160ff1685565b604051610185959493929190613b3a565b61025e61027d36600461373e565b609960205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949390921692909160ff1685565b6101a16102c936600461370e565b610dd9565b6102ee6102dc366004613b6d565b60976020526000908152604090205481565b604051908152602001610185565b6101a1611018565b6102ee61031236600461373e565b61104e565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610185565b6101b661034a366004613ad6565b61106f565b6101a161035d366004613b91565b611541565b6101a161037036600461370e565b611752565b610324610383366004613ad6565b60986020908152600092835260408084209091529082529020546001600160a01b031681565b6101a16103b736600461373e565b611a73565b6102ee6103ca36600461373e565b611b4f565b6103246103dd366004613bcd565b611b5a565b6101a16103f03660046139e2565b611b92565b6101a1610403366004613b6d565b611bd3565b600260655414156104345760405162461bcd60e51b815260040161042b90613bef565b60405180910390fd5b6002606555600082815260996020526040902060018101546001600160a01b038381169116146104b75760405162461bcd60e51b815260206004820152602860248201527f546f6b656e4272696467653a206e6f2066756e6420666f72207468652062656e604482015267656669636961727960c01b606482015260840161042b565b43816003015411156105275760405162461bcd60e51b815260206004820152603360248201527f546f6b656e4272696467653a206e6f74206d617475726520656e6f75676820746044820152721bc81dda5d1a191c985dc81d1a1948199d5b99606a1b606482015260840161042b565b6001600482015460ff16600281111561054257610542613b02565b146105ab5760405162461bcd60e51b815260206004820152603360248201527f546f6b656e4272696467653a2066756e642069732070656e64696e67206f72206044820152721dd85cc8185b1c9958591e4818db185a5b5959606a1b606482015260840161042b565b600081600201541180156105dc575080546001600160a01b0316600090815260976020526040902054600282015411155b61063b5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a206e6f7420656e6f75676820616d6f756e7420746044820152696f20776974686472617760b01b606482015260840161042b565b60048101805460ff191660029081179091558101805460009182905582546001600160a01b0316825260976020526040822080549192839261067e908490613c3c565b9091555050815460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156106d057600080fd5b505af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190613c53565b5081546040518281526001600160a01b03918216918516907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398906020015b60405180910390a3505060016065555050565b6000828152609b602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6033546001600160a01b031633146107b05760405162461bcd60e51b815260040161042b90613c75565b600081815260996020526040812090600482015460ff1660028111156107d8576107d8613b02565b146108415760405162461bcd60e51b815260206004820152603360248201527f546f6b656e4272696467653a207769746864726177207265717565737420737460448201527261747573206973206e6f742070656e64696e6760681b606482015260840161042b565b6004810180546001919060ff191682805b02179055505050565b6002606554141561087e5760405162461bcd60e51b815260040161042b90613bef565b60026065556108908585858585611c6e565b845161089c9087611dde565b94516000908152609e60205260409020805460ff19169515159590951790945550506001606555505050565b604080516020808201835260008083528351808301855281815284516004815260248101865292830180516001600160e01b03166306fdde0360e01b179052935190939184918291606091829182916001600160a01b038c169161092b91613cda565b600060405180830381855afa9150503d8060008114610966576040519150601f19603f3d011682016040523d82523d6000602084013e61096b565b606091505b509094509250831561098e578280602001905181019061098b9190613cf6565b96505b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b17905290516001600160a01b038c16916109cc91613cda565b600060405180830381855afa9150503d8060008114610a07576040519150601f19603f3d011682016040523d82523d6000602084013e610a0c565b606091505b5090945091508315610a2f5781806020019051810190610a2c9190613cf6565b95505b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516001600160a01b038c1691610a6d91613cda565b600060405180830381855afa9150503d8060008114610aa8576040519150601f19603f3d011682016040523d82523d6000602084013e610aad565b606091505b5090945090508315610ad05780806020019051810190610acd9190613d63565b94505b6000610adb33611fc5565b610ae48c611fc5565b610aed8c612024565b610af68b612046565b610aff8b612046565b610b0b8b60ff16612024565b604051602001610b2096959493929190613d86565b60405160208183030381529060405290506000610b3c826120e7565b6040516323b872dd60e01b8152336004820152306024820152604481018d90529091506001600160a01b038d16906323b872dd90606401602060405180830381600087803b158015610b8d57600080fd5b505af1158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190613c53565b506001600160a01b038c16600090815260976020526040812080548d9290610bee908490613e05565b90915550600090507f58d7e2b4abc9af1da146830efa9b76eab969c11a3b860a4fb313068430f376ea82604051610c259190613e1d565b60405180910390a25060019b9a5050505050505050505050565b6033546001600160a01b03163314610c695760405162461bcd60e51b815260040161042b90613c75565b609d8054610c7990600190613c3c565b81548110610c8957610c89613e50565b9060005260206000200154821015610cb35760405162461bcd60e51b815260040161042b90613e66565b609d8054610cc390600190613c3c565b81548110610cd357610cd3613e50565b9060005260206000200154821115610d1b57609d80546001810182556000919091527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b018290555b6000828152609b602090815260408083206001600160a01b038516845290915290205460ff1615610d4b57600080fd5b6000828152609c602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b038716908117909155868552609b8452828520818652845293829020805460ff19169091179055518481527f7429a06e9412e469f0d64f9d222640b0af359f556b709e2913588c227851b88d910160405180910390a25050565b6033546001600160a01b03163314610e035760405162461bcd60e51b815260040161042b90613c75565b609d8054610e1390600190613c3c565b81548110610e2357610e23613e50565b9060005260206000200154821015610e4d5760405162461bcd60e51b815260040161042b90613e66565b610e578282610759565b610e6057600080fd5b6000828152609c6020526040812054815b81811015610eda576000858152609c6020526040902080546001600160a01b038616919083908110610ea557610ea5613e50565b6000918252602090912001546001600160a01b03161415610ec857809250610eda565b80610ed281613ebc565b915050610e71565b506000848152609b602090815260408083206001600160a01b03871684528252808320805460ff19169055868352609c9091529020610f1a600183613c3c565b81548110610f2a57610f2a613e50565b6000918252602080832090910154868352609c909152604090912080546001600160a01b039092169184908110610f6357610f63613e50565b600091825260208083209190910180546001600160a01b0319166001600160a01b039490941693909317909255858152609c90915260409020805480610fab57610fab613ed7565b600082815260209020810160001990810180546001600160a01b03191690550190556040516001600160a01b038416907f7126bef88d1149ccdff9681ed5aecd3ba5ae70c96517551de250af09cebd1a0b9061100a9087815260200190565b60405180910390a250505050565b6033546001600160a01b031633146110425760405162461bcd60e51b815260040161042b90613c75565b61104c600061217f565b565b609d818154811061105e57600080fd5b600091825260209091200154905081565b604051632142170760e11b8152336004820152306024820152604481018290526000906001600160a01b038416906342842e0e90606401600060405180830381600087803b1580156110c057600080fd5b505af11580156110d4573d6000803e3d6000fd5b505050506001600160a01b0383166000818152609860209081526040808320868452825280832080546001600160a01b0319163317905580518083018252838152815180840183528481528251938401835293835290516301ffc9a760e01b8152635b5e139f60e01b600482015290936060916301ffc9a79060240160206040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190613c53565b156114965760408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b1790529051600091606091829182916001600160a01b038d16916111ed91613cda565b600060405180830381855afa9150503d8060008114611228576040519150601f19603f3d011682016040523d82523d6000602084013e61122d565b606091505b509094509250836112805760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4272696467653a2063616e6e6f7420676574206e6674206e616d65604482015260640161042b565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b17905290516001600160a01b038d16916112be91613cda565b600060405180830381855afa9150503d80600081146112f9576040519150601f19603f3d011682016040523d82523d6000602084013e6112fe565b606091505b5090945091508361135c5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4272696467653a2063616e6e6f7420676574206e66742073796d626044820152611bdb60f21b606482015260840161042b565b8a6001600160a01b03168a60405160240161137991815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663c87b56dd60e01b179052516113ae9190613cda565b600060405180830381855afa9150503d80600081146113e9576040519150601f19603f3d011682016040523d82523d6000602084013e6113ee565b606091505b5090945090508361144f5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4272696467653a2063616e6e6f7420676574206e667420746f6b656044820152646e2055524960d81b606482015260840161042b565b828060200190518101906114639190613cf6565b9750818060200190518101906114799190613cf6565b96508080602001905181019061148f9190613cf6565b9550505050505b61149f33611fc5565b6114a888611fc5565b6114b188612024565b6114ba87612046565b6114c387612046565b6114cc87612046565b6040516020016114e196959493929190613d86565b60408051601f19818403018152919052905060017f58d7e2b4abc9af1da146830efa9b76eab969c11a3b860a4fb313068430f376ea61151f836120e7565b60405161152c9190613e1d565b60405180910390a25060019695505050505050565b600054610100900460ff1661155c5760005460ff1615611560565b303b155b6115c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161042b565b600054610100900460ff161580156115e5576000805461ffff19166101011790555b6115ed6121d1565b60008052609c60209081528251611629917f21d5695aeb71770b4b420e85352fe1a012fa06ae92de02f7ee513765e0afa0239190850190613529565b5060005b60008052609c6020527f21d5695aeb71770b4b420e85352fe1a012fa06ae92de02f7ee513765e0afa02354811015611709576000808052609c6020527f21d5695aeb71770b4b420e85352fe1a012fa06ae92de02f7ee513765e0afa02380546001927f10afac9233b4ccc54d6404ffc1cf3b47515a2b8edbf675d15eddce05a027dcbd929091859081106116c3576116c3613e50565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790558061170181613ebc565b91505061162d565b50609d805460018101825560009182527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0155801561174e576000805461ff00191690555b5050565b600260655414156117755760405162461bcd60e51b815260040161042b90613bef565b600260658190556000838152609a602052604090209081015460018201546001600160a01b038481169116146117fd5760405162461bcd60e51b815260206004820152602760248201527f546f6b656e4272696467653a206e6f206e667420666f72207468652062656e656044820152666669636961727960c81b606482015260840161042b565b438260030154111561186c5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e4272696467653a206e6f74206d617475726520656e6f75676820746044820152711bc81dda5d1a191c985dc81d1a19481b999d60721b606482015260840161042b565b6001600483015460ff16600281111561188757611887613b02565b146118ef5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e4272696467653a206e66742069732070656e64696e67206f722077604482015271185cc8185b1c9958591e4818db185a5b595960721b606482015260840161042b565b81546001600160a01b039081166000908152609860209081526040808320858452909152902054166119895760405162461bcd60e51b815260206004820152603f60248201527f546f6b656e4272696467653a206e667420746f6b656e20696420646f6573206e60448201527f6f74206578697374206f722077617320616c726561647920636c61696d656400606482015260840161042b565b6004828101805460ff1916600217905582546001600160a01b0390811660009081526098602090815260408083208684529091529081902080546001600160a01b031916905584549051632142170760e11b8152309381019390935285821660248401526044830184905216906342842e0e90606401600060405180830381600087803b158015611a1957600080fd5b505af1158015611a2d573d6000803e3d6000fd5b505083546040518481526001600160a01b03918216935090861691507f705b466d82a54e5c3e4fa79d2de02dff364a2c0513cf6b9c9fa7688bba859ce690602001610746565b6033546001600160a01b03163314611a9d5760405162461bcd60e51b815260040161042b90613c75565b60008181526099602052604090206001600482015460ff166002811115611ac657611ac6613b02565b14611b395760405162461bcd60e51b815260206004820152603860248201527f546f6b656e4272696467653a207769746864726177207265717565737420737460448201527f61747573206973206e6f7420776974686472617761626c650000000000000000606482015260840161042b565b6004810180546000919060ff1916600183610852565b600061078082612200565b609c6020528160005260406000208181548110611b7657600080fd5b6000918252602090912001546001600160a01b03169150829050565b60026065541415611bb55760405162461bcd60e51b815260040161042b90613bef565b6002606555611bc78585858585611c6e565b845161089c90876122f5565b6033546001600160a01b03163314611bfd5760405162461bcd60e51b815260040161042b90613c75565b6001600160a01b038116611c625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161042b565b611c6b8161217f565b50565b84516000908152609e602052604090205460ff1615611ce05760405162461bcd60e51b815260206004820152602860248201527f546f6b656e4272696467653a206576656e7420686173682077617320616c726560448201526718591e481d5cd95960c21b606482015260840161042b565b6000806000611cef87856124c5565b50925092509250611d0a611d0284612200565b83888861265c565b611d665760405162461bcd60e51b815260206004820152602760248201527f546f6b656e4272696467653a20626c6f636b207369676e6174757265206973206044820152661a5b9d985b1a5960ca1b606482015260840161042b565b611d7e886040015189600001518a6020015184612850565b611dd45760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4272696467653a20696e76616c6964206d65726b6c652070726f6f6044820152603360f91b606482015260840161042b565b5050505050505050565b6000828152609a60205260408120818080611df987876128d8565b6001600160a01b038084166000908152609860209081526040808320858452909152902054939650919450925016611e925760405162461bcd60e51b815260206004820152603660248201527f546f6b656e4272696467653a20696e76616c696420746f6b656e20696420746f604482015275206d616b65207265717565737420776974686472617760501b606482015260840161042b565b83546001600160a01b038085166001600160a01b03199283161786556001860180549185169190921617905560028401819055611ed0436032613e05565b60038581019182556004808701805460ff199081166001908117835560008d8152609a602052604090208a5481546001600160a01b039182166001600160a01b0319918216178355838d015483850180549190931691161790556002808c015481830155965495810195909555915492840180548a9660ff909516949193921691908490811115611f6357611f63613b02565b0217905550905050826001600160a01b0316826001600160a01b03167f84149ec166f44250e1dc5ddb73714622cfe405a19f03a91b60682bc23878c64683604051611fb091815260200190565b60405180910390a35060019695505050505050565b60405160a160f81b6020820152600b60f91b6021820152600160fa1b6022820152600560fa1b6023820152606082811b6bffffffffffffffffffffffff19166024830152906038015b6040516020818303038152906040529050919050565b606060a660236002602160008660405160200161200e96959493929190613eed565b8051606090637ffffffa81106120915760405162461bcd60e51b815260206004820152601060248201526f546f6f206c6172676520737472696e6760801b604482015260640161042b565b60a261209f60806004613f36565b6120aa836006613e05565b600c6120b860806004613f36565b85886040516020016120d09796959493929190613f5b565b604051602081830303815290604052915050919050565b6060637ffffffa82511061213d5760405162461bcd60e51b815260206004820152601860248201527f546f6f206c6172676520617267756d656e742061727261790000000000000000604482015260640161042b565b60a561214b60806004613f36565b8351612158906006613e05565b603061216660806004613f36565b86518760405160200161200e9796959493929190613f5b565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166121f85760405162461bcd60e51b815260040161042b90613fd1565b61104c612969565b609d54600090819061221490600190613c3c565b90506000609d828154811061222b5761222b613e50565b90600052602060002001549050808410612246579392505050565b815b80156122ea57609d818154811061226157612261613e50565b9060005260206000200154851080156122a15750609d612282600183613c3c565b8154811061229257612292613e50565b90600052602060002001548510155b156122d857609d6122b3600183613c3c565b815481106122c3576122c3613e50565b90600052602060002001549350505050919050565b806122e28161401c565b915050612248565b506000949350505050565b600082815260996020526040812081808061231087876128d8565b92509250925060008111801561233e57506001600160a01b0383166000908152609760205260409020548111155b6123a75760405162461bcd60e51b815260206004820152603460248201527f546f6b656e4272696467653a20696e76616c696420616d6f756e7420746f206d604482015273616b65207265717565737420776974686472617760601b606482015260840161042b565b83546001600160a01b038085166001600160a01b031992831617865560018601805491851691909216179055600284018190556123e5436032613e05565b60038581019182556004808701805460ff199081166001908117835560008d81526099602052604090208a5481546001600160a01b039182166001600160a01b0319918216178355838d015483850180549190931691161790556002808c015481830155965495810195909555915492840180548a9660ff90951694919392169190849081111561247857612478613b02565b0217905550905050826001600160a01b0316826001600160a01b03167fcdb62e3f244f9959bd661d145243fc71558361230885919e11fcc84312d44c7d83604051611fb091815260200190565b60008060008084602001516124dd8660000151612999565b146125345760405162461bcd60e51b815260206004820152602160248201527f506f7374636861696e3a20696e76616c696420454946206578747261206461746044820152606160f81b606482015260840161042b565b600080600061254289612a17565b925092509250808860600151146125a65760405162461bcd60e51b815260206004820152602260248201527f506f7374636861696e3a20696e76616c6964206578747261206461746120726f6044820152611bdd60f21b606482015260840161042b565b6125cd886020015189604001518a606001518b60800151612da4909392919063ffffffff16565b61262b5760405162461bcd60e51b815260206004820152602960248201527f506f7374636861696e3a20696e76616c696420454946206578747261206d657260448201526835b63290383937b7b360b91b606482015260840161042b565b828261263c8a60000151600061303e565b8a5161264990602061303e565b929c919b50995090975095505050505050565b6000848152609c602052604081205481908190612678906130a3565b90506000805b86518110156128435760005b8651811015612830576126b68a8883815181106126a9576126a9613e50565b6020026020010151610759565b61270e5760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4272696467653a207369676e6572206973206e6f742076616c696460448201526330ba37b960e11b606482015260840161042b565b61274b8989848151811061272457612724613e50565b602002602001015189848151811061273e5761273e613e50565b60200260200101516130d3565b1561281e578461275a81613ebc565b955050826001600160a01b031687828151811061277957612779613e50565b60200260200101516001600160a01b0316116127fd5760405162461bcd60e51b815260206004820152603b60248201527f546f6b656e4272696467653a206475706c6963617465207369676e617475726560448201527f206f72207369676e657273206973206f7574206f66206f726465720000000000606482015260840161042b565b86818151811061280f5761280f613e50565b60200260200101519250612830565b8061282881613ebc565b91505061268a565b508061283b81613ebc565b91505061267e565b5050111595945050505050565b600083815b86518110156128cc576001811b8516806128935761288c8389848151811061287f5761287f613e50565b602002602001015161318a565b92506128b9565b6128b68883815181106128a8576128a8613e50565b60200260200101518461318a565b92505b50806128c481613ebc565b915050612855565b50909114949350505050565b600080600080848060200190518101906128f29190614033565b8551602087012090915086811461294b5760405162461bcd60e51b815260206004820152601860248201527f506f7374636861696e3a20696e76616c6964206576656e740000000000000000604482015260640161042b565b81602001518260400151836060015194509450945050509250925092565b600054610100900460ff166129905760405162461bcd60e51b815260040161042b90613fd1565b61104c3361217f565b60006002600160a1604260046040876040516020016129bd9695949392919061408a565b60408051601f19818403018152908290526129d791613cda565b602060405180830381855afa1580156129f4573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061078091906140eb565b60008060008084806020019051810190612a319190614104565b9050600060026000612a468460000151613203565b612a538560400151613203565b604051602001612a6593929190614193565b60408051601f1981840301815290829052612a7f91613cda565b602060405180830381855afa158015612a9c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612abf91906140eb565b90506000600260008460600151612ad98660800151613227565b604051602001612aeb93929190614193565b60408051601f1981840301815290829052612b0591613cda565b602060405180830381855afa158015612b22573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b4591906140eb565b9050600060026000612b5a8660a00151613227565b8660c00151604051602001612b7193929190614193565b60408051601f1981840301815290829052612b8b91613cda565b602060405180830381855afa158015612ba8573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bcb91906140eb565b90506000600260008585604051602001612be793929190614193565b60408051601f1981840301815290829052612c0191613cda565b602060405180830381855afa158015612c1e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612c4191906140eb565b9050600060026000848860e00151604051602001612c6193929190614193565b60408051601f1981840301815290829052612c7b91613cda565b602060405180830381855afa158015612c98573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612cbb91906140eb565b90506000600260078484604051602001612cd793929190614193565b60408051601f1981840301815290829052612cf191613cda565b602060405180830381855afa158015612d0e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612d3191906140eb565b905086602001518114612d865760405162461bcd60e51b815260206004820152601f60248201527f506f7374636861696e3a20696e76616c696420626c6f636b2068656164657200604482015260640161042b565b60a087015160e090970151969b909a50959850949650505050505050565b600080849050600060018751612dba9190613c3c565b905060005b81811015612f05576001811b861680612e645760026000858b8581518110612de957612de9613e50565b6020026020010151604051602001612e0393929190614193565b60408051601f1981840301815290829052612e1d91613cda565b602060405180830381855afa158015612e3a573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612e5d91906140eb565b9350612ef2565b600260008a8481518110612e7a57612e7a613e50565b602002602001015186604051602001612e9593929190614193565b60408051601f1981840301815290829052612eaf91613cda565b602060405180830381855afa158015612ecc573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612eef91906140eb565b93505b5080612efd81613ebc565b915050612dbf565b506001811b851680612fa35760026008848a8581518110612f2857612f28613e50565b6020026020010151604051602001612f4293929190614193565b60408051601f1981840301815290829052612f5c91613cda565b602060405180830381855afa158015612f79573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612f9c91906140eb565b9250613031565b60026008898481518110612fb957612fb9613e50565b602002602001015185604051602001612fd493929190614193565b60408051601f1981840301815290829052612fee91613cda565b602060405180830381855afa15801561300b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061302e91906140eb565b92505b5050909114949350505050565b60008060005b602081101561309b576130588160086141b8565b856130638387613e05565b8151811061307357613073613e50565b01602001516001600160f81b031916901c91909117908061309381613ebc565b915050613044565b509392505050565b6000816130b257506000919050565b60036130bf600184613c3c565b6130c991906141d7565b6107809083613c3c565b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081866040516020016131239291906141f9565b60408051601f19818403018152919052805160209091012090506001600160a01b0384166131518287613398565b6001600160a01b0316148061318057506001600160a01b0384166131758787613398565b6001600160a01b0316145b9695505050505050565b600082158015613198575081155b156131a557506000610780565b826131d4576040805160208101849052015b604051602081830303815290604052805190602001209050610780565b816131ea576040805160208101859052016131b7565b60408051602081018590529081018390526060016131b7565b60006002600160a1602260046020876040516020016129bd96959493929190613eed565b60006001600883901c5b801561324c57613242600183613f36565b915060081c613231565b60008260ff166001600160401b03811115613269576132696135b8565b6040519080825280601f01601f191660200182016040528015613293576020820181803683370190505b50859250905060015b8360ff168160ff161161330b5760ff83166001600160f81b031960f885901b16836132c7848861421b565b60ff16815181106132da576132da613e50565b60200101906001600160f81b031916908160001a9053505060089290921c91806133038161423e565b91505061329c565b506002600160a361331c8684613f36565b600287866040516020016133359695949392919061408a565b60408051601f198184030181529082905261334f91613cda565b602060405180830381855afa15801561336c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061338f91906140eb565b95945050505050565b600081516041146133eb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161042b565b60208201516040830151606084015160001a6131808682858560008360ff16601b148061341b57508360ff16601c145b6134725760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161042b565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156134c6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661338f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161042b565b82805482825590600052602060002090810192821561357e579160200282015b8281111561357e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613549565b5061358a92915061358e565b5090565b5b8082111561358a576000815560010161358f565b6001600160a01b0381168114611c6b57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156135f0576135f06135b8565b60405290565b604051601f8201601f191681016001600160401b038111828210171561361e5761361e6135b8565b604052919050565b60006001600160401b0382111561363f5761363f6135b8565b50601f01601f191660200190565b600082601f83011261365e57600080fd5b813561367161366c82613626565b6135f6565b81815284602083860101111561368657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156136b957600080fd5b84356136c4816135a3565b935060208501356136d4816135a3565b92506040850135915060608501356001600160401b038111156136f657600080fd5b6137028782880161364d565b91505092959194509250565b6000806040838503121561372157600080fd5b823591506020830135613733816135a3565b809150509250929050565b60006020828403121561375057600080fd5b5035919050565b60006001600160401b03821115613770576137706135b8565b5060051b60200190565b600082601f83011261378b57600080fd5b8135602061379b61366c83613757565b82815260059290921b840181019181810190868411156137ba57600080fd5b8286015b848110156137d557803583529183019183016137be565b509695505050505050565b6000606082840312156137f257600080fd5b604051606081016001600160401b038282108183111715613815576138156135b8565b816040528293508435835260208501356020840152604085013591508082111561383e57600080fd5b5061384b8582860161377a565b6040830152505092915050565b600082601f83011261386957600080fd5b8135602061387961366c83613757565b82815260059290921b8401810191818101908684111561389857600080fd5b8286015b848110156137d55780356001600160401b038111156138bb5760008081fd5b6138c98986838b010161364d565b84525091830191830161389c565b600082601f8301126138e857600080fd5b813560206138f861366c83613757565b82815260059290921b8401810191818101908684111561391757600080fd5b8286015b848110156137d557803561392e816135a3565b835291830191830161391b565b600060a0828403121561394d57600080fd5b60405160a081016001600160401b038282108183111715613970576139706135b8565b81604052829350843591508082111561398857600080fd5b6139948683870161364d565b835260208501356020840152604085013560408401526060850135606084015260808501359150808211156139c857600080fd5b506139d58582860161377a565b6080830152505092915050565b60008060008060008060c087890312156139fb57600080fd5b86356001600160401b0380821115613a1257600080fd5b613a1e8a838b0161364d565b97506020890135915080821115613a3457600080fd5b613a408a838b016137e0565b96506040890135915080821115613a5657600080fd5b613a628a838b0161364d565b95506060890135915080821115613a7857600080fd5b613a848a838b01613858565b94506080890135915080821115613a9a57600080fd5b613aa68a838b016138d7565b935060a0890135915080821115613abc57600080fd5b50613ac989828a0161393b565b9150509295509295509295565b60008060408385031215613ae957600080fd5b8235613af4816135a3565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60038110613b3657634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03868116825285166020820152604081018490526060810183905260a081016131806080830184613b18565b600060208284031215613b7f57600080fd5b8135613b8a816135a3565b9392505050565b600060208284031215613ba357600080fd5b81356001600160401b03811115613bb957600080fd5b613bc5848285016138d7565b949350505050565b60008060408385031215613be057600080fd5b50508035926020909101359150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015613c4e57613c4e613c26565b500390565b600060208284031215613c6557600080fd5b81518015158114613b8a57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60005b83811015613cc5578181015183820152602001613cad565b83811115613cd4576000848401525b50505050565b60008251613cec818460208701613caa565b9190910192915050565b600060208284031215613d0857600080fd5b81516001600160401b03811115613d1e57600080fd5b8201601f81018413613d2f57600080fd5b8051613d3d61366c82613626565b818152856020838501011115613d5257600080fd5b61338f826020830160208601613caa565b600060208284031215613d7557600080fd5b815160ff81168114613b8a57600080fd5b600087516020613d998285838d01613caa565b885191840191613dac8184848d01613caa565b8851920191613dbe8184848c01613caa565b8751920191613dd08184848b01613caa565b8651920191613de28184848a01613caa565b8551920191613df48184848901613caa565b919091019998505050505050505050565b60008219821115613e1857613e18613c26565b500190565b6020815260008251806020840152613e3c816040850160208701613caa565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b60208082526036908201527f546f6b656e4272696467653a2063616e6e6f742075706461746520707265766960408201527537bab9903432b4b3b43a3993903b30b634b230ba37b960511b606082015260800190565b6000600019821415613ed057613ed0613c26565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6001600160f81b031960f897881b8116825295871b8616600182015293861b8516600285015291851b8416600384015290931b9091166004820152600581019190915260250190565b600060ff821660ff84168060ff03821115613f5357613f53613c26565b019392505050565b600060ff60f81b808a60f81b168352808960f81b16600184015263ffffffff60e01b808960e01b166002850152818860f81b166006850152818760f81b166007850152808660e01b16600885015250508251613fbe81600c850160208701613caa565b91909101600c0198975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008161402b5761402b613c26565b506000190190565b60006080828403121561404557600080fd5b61404d6135ce565b82518152602083015161405f816135a3565b60208201526040830151614072816135a3565b60408201526060928301519281019290925250919050565b600060ff60f81b808960f81b168352808860f81b166001840152808760f81b166002840152808660f81b166003840152808560f81b1660048401525082516140d9816005850160208701613caa565b91909101600501979650505050505050565b6000602082840312156140fd57600080fd5b5051919050565b600061010080838503121561411857600080fd5b604051908101906001600160401b038211818310171561413a5761413a6135b8565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b60f89390931b6001600160f81b03191683526001830191909152602182015260410190565b60008160001904831182151516156141d2576141d2613c26565b500290565b6000826141f457634e487b7160e01b600052601260045260246000fd5b500490565b6000835161420b818460208801613caa565b9190910191825250602001919050565b600060ff821660ff84168082101561423557614235613c26565b90039392505050565b600060ff821660ff81141561425557614255613c26565b6001019291505056fea26469706673582212202efd0074dc6d01d6711f3d063d4562745171645b1e2482ed3b1eda46ff91a18c64736f6c63430008090033";

    public static final String FUNC__BALANCES = "_balances";

    public static final String FUNC__OWNERS = "_owners";

    public static final String FUNC__WITHDRAW = "_withdraw";

    public static final String FUNC__WITHDRAWNFT = "_withdrawNFT";

    public static final String FUNC_ADDVALIDATOR = "addValidator";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DEPOSITNFT = "depositNFT";

    public static final String FUNC_GETVALIDATORHEIGHT = "getValidatorHeight";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISVALIDATOR = "isValidator";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PENDINGWITHDRAW = "pendingWithdraw";

    public static final String FUNC_REMOVEVALIDATOR = "removeValidator";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPENDINGWITHDRAW = "unpendingWithdraw";

    public static final String FUNC_VALIDATORHEIGHTS = "validatorHeights";

    public static final String FUNC_VALIDATORS = "validators";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWNFT = "withdrawNFT";

    public static final String FUNC_WITHDRAWREQUEST = "withdrawRequest";

    public static final String FUNC_WITHDRAWREQUESTNFT = "withdrawRequestNFT";

    public static final Event DEPOSITED_EVENT = new Event("Deposited", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VALIDATORADDED_EVENT = new Event("ValidatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VALIDATORREMOVED_EVENT = new Event("ValidatorRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWREQUEST_EVENT = new Event("WithdrawRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWREQUESTNFT_EVENT = new Event("WithdrawRequestNFT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALNFT_EVENT = new Event("WithdrawalNFT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected TokenBridge(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TokenBridge(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TokenBridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TokenBridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DepositedEventResponse> getDepositedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITED_EVENT, transactionReceipt);
        ArrayList<DepositedEventResponse> responses = new ArrayList<DepositedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositedEventResponse typedResponse = new DepositedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.asset = (Uint8) eventValues.getIndexedValues().get(0);
            typedResponse.payload = (DynamicBytes) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositedEventResponse> depositedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositedEventResponse>() {
            @Override
            public DepositedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITED_EVENT, log);
                DepositedEventResponse typedResponse = new DepositedEventResponse();
                typedResponse.log = log;
                typedResponse.asset = (Uint8) eventValues.getIndexedValues().get(0);
                typedResponse.payload = (DynamicBytes) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositedEventResponse> depositedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITED_EVENT));
        return depositedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<ValidatorAddedEventResponse> getValidatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VALIDATORADDED_EVENT, transactionReceipt);
        ArrayList<ValidatorAddedEventResponse> responses = new ArrayList<ValidatorAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ValidatorAddedEventResponse typedResponse = new ValidatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ValidatorAddedEventResponse> validatorAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ValidatorAddedEventResponse>() {
            @Override
            public ValidatorAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(VALIDATORADDED_EVENT, log);
                ValidatorAddedEventResponse typedResponse = new ValidatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ValidatorAddedEventResponse> validatorAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALIDATORADDED_EVENT));
        return validatorAddedEventFlowable(filter);
    }

    public List<ValidatorRemovedEventResponse> getValidatorRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VALIDATORREMOVED_EVENT, transactionReceipt);
        ArrayList<ValidatorRemovedEventResponse> responses = new ArrayList<ValidatorRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ValidatorRemovedEventResponse typedResponse = new ValidatorRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ValidatorRemovedEventResponse> validatorRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ValidatorRemovedEventResponse>() {
            @Override
            public ValidatorRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(VALIDATORREMOVED_EVENT, log);
                ValidatorRemovedEventResponse typedResponse = new ValidatorRemovedEventResponse();
                typedResponse.log = log;
                typedResponse._validator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.height = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ValidatorRemovedEventResponse> validatorRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALIDATORREMOVED_EVENT));
        return validatorRemovedEventFlowable(filter);
    }

    public List<WithdrawRequestEventResponse> getWithdrawRequestEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWREQUEST_EVENT, transactionReceipt);
        ArrayList<WithdrawRequestEventResponse> responses = new ArrayList<WithdrawRequestEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawRequestEventResponse typedResponse = new WithdrawRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawRequestEventResponse> withdrawRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawRequestEventResponse>() {
            @Override
            public WithdrawRequestEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWREQUEST_EVENT, log);
                WithdrawRequestEventResponse typedResponse = new WithdrawRequestEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawRequestEventResponse> withdrawRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWREQUEST_EVENT));
        return withdrawRequestEventFlowable(filter);
    }

    public List<WithdrawRequestNFTEventResponse> getWithdrawRequestNFTEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWREQUESTNFT_EVENT, transactionReceipt);
        ArrayList<WithdrawRequestNFTEventResponse> responses = new ArrayList<WithdrawRequestNFTEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawRequestNFTEventResponse typedResponse = new WithdrawRequestNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawRequestNFTEventResponse> withdrawRequestNFTEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawRequestNFTEventResponse>() {
            @Override
            public WithdrawRequestNFTEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWREQUESTNFT_EVENT, log);
                WithdrawRequestNFTEventResponse typedResponse = new WithdrawRequestNFTEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawRequestNFTEventResponse> withdrawRequestNFTEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWREQUESTNFT_EVENT));
        return withdrawRequestNFTEventFlowable(filter);
    }

    public List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalEventResponse>() {
            @Override
            public WithdrawalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWAL_EVENT, log);
                WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.token = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public List<WithdrawalNFTEventResponse> getWithdrawalNFTEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWALNFT_EVENT, transactionReceipt);
        ArrayList<WithdrawalNFTEventResponse> responses = new ArrayList<WithdrawalNFTEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalNFTEventResponse typedResponse = new WithdrawalNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.nft = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalNFTEventResponse> withdrawalNFTEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalNFTEventResponse>() {
            @Override
            public WithdrawalNFTEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWALNFT_EVENT, log);
                WithdrawalNFTEventResponse typedResponse = new WithdrawalNFTEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.nft = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalNFTEventResponse> withdrawalNFTEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALNFT_EVENT));
        return withdrawalNFTEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> _balances(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__BALANCES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> _owners(Address param0, Uint256 param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__OWNERS, 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>> _withdraw(Bytes32 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WITHDRAW, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>>(function,
                new Callable<Tuple5<Address, Address, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple5<Address, Address, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Address, Address, Uint256, Uint256, Uint8>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint8) results.get(4));
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>> _withdrawNFT(Bytes32 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WITHDRAWNFT, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint8>>(function,
                new Callable<Tuple5<Address, Address, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple5<Address, Address, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Address, Address, Uint256, Uint256, Uint8>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint8) results.get(4));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> addValidator(Uint256 _height, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDVALIDATOR, 
                Arrays.<Type>asList(_height, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(Address token, Uint256 amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(token, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> depositNFT(Address nft, Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSITNFT, 
                Arrays.<Type>asList(nft, tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getValidatorHeight(Uint256 _height) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVALIDATORHEIGHT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(DynamicArray<Address> _validators) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_validators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isValidator(Uint256 _height, Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISVALIDATOR, 
                Arrays.<Type>asList(_height, _addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(Address param0, Address param1, Uint256 param2, DynamicBytes param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(param0, param1, param2, param3), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pendingWithdraw(Bytes32 _hash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PENDINGWITHDRAW, 
                Arrays.<Type>asList(_hash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeValidator(Uint256 _height, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEVALIDATOR, 
                Arrays.<Type>asList(_height, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpendingWithdraw(Bytes32 _hash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPENDINGWITHDRAW, 
                Arrays.<Type>asList(_hash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> validatorHeights(Uint256 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATORHEIGHTS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> validators(Uint256 param0, Uint256 param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATORS, 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(Bytes32 _hash, Address beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(_hash, beneficiary), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawNFT(Bytes32 _hash, Address beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWNFT, 
                Arrays.<Type>asList(_hash, beneficiary), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRequest(DynamicBytes _event, EventProof eventProof, DynamicBytes blockHeader, DynamicArray<DynamicBytes> sigs, DynamicArray<Address> signers, ExtraProofData extraProof) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWREQUEST, 
                Arrays.<Type>asList(_event, eventProof, blockHeader, sigs, signers, extraProof), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRequestNFT(DynamicBytes _event, EventProof eventProof, DynamicBytes blockHeader, DynamicArray<DynamicBytes> sigs, DynamicArray<Address> signers, ExtraProofData extraProof) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWREQUESTNFT, 
                Arrays.<Type>asList(_event, eventProof, blockHeader, sigs, signers, extraProof), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TokenBridge load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TokenBridge(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TokenBridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TokenBridge(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TokenBridge load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TokenBridge(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TokenBridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TokenBridge(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TokenBridge> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TokenBridge.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TokenBridge> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TokenBridge.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TokenBridge> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TokenBridge.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TokenBridge> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TokenBridge.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EventProof extends DynamicStruct {
        public Bytes32 leaf;

        public Uint256 position;

        public DynamicArray<Bytes32> merkleProofs;

        public EventProof(Bytes32 leaf, Uint256 position, DynamicArray<Bytes32> merkleProofs) {
            super(leaf,position,merkleProofs);
            this.leaf = leaf;
            this.position = position;
            this.merkleProofs = merkleProofs;
        }
    }

    public static class ExtraProofData extends DynamicStruct {
        public DynamicBytes leaf;

        public Bytes32 hashedLeaf;

        public Uint256 position;

        public Bytes32 extraRoot;

        public DynamicArray<Bytes32> extraMerkleProofs;

        public ExtraProofData(DynamicBytes leaf, Bytes32 hashedLeaf, Uint256 position, Bytes32 extraRoot, DynamicArray<Bytes32> extraMerkleProofs) {
            super(leaf,hashedLeaf,position,extraRoot,extraMerkleProofs);
            this.leaf = leaf;
            this.hashedLeaf = hashedLeaf;
            this.position = position;
            this.extraRoot = extraRoot;
            this.extraMerkleProofs = extraMerkleProofs;
        }
    }

    public static class DepositedEventResponse extends BaseEventResponse {
        public Uint8 asset;

        public DynamicBytes payload;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class ValidatorAddedEventResponse extends BaseEventResponse {
        public Address _validator;

        public Uint256 height;
    }

    public static class ValidatorRemovedEventResponse extends BaseEventResponse {
        public Address _validator;

        public Uint256 height;
    }

    public static class WithdrawRequestEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address token;

        public Uint256 value;
    }

    public static class WithdrawRequestNFTEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address token;

        public Uint256 tokenId;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address token;

        public Uint256 value;
    }

    public static class WithdrawalNFTEventResponse extends BaseEventResponse {
        public Address beneficiary;

        public Address nft;

        public Uint256 tokenId;
    }
}
